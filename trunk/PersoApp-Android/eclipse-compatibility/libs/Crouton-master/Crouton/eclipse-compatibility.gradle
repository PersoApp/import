apply plugin: 'eclipse'

eclipse.classpath.plusConfigurations += configurations.compile
eclipse.classpath.file {

    beforeMerged { classpath ->
        classpath.entries.removeAll() { c ->
            c.kind == 'src'
        }
    }

    withXml {
        def node = it.asNode()

        node.appendNode('classpathentry kind="src" path="src/main/java"')

        if (project.hasProperty('buildType')) {
            if (!new File(project.projectDir, "src/$buildType/java").exists()) {
                throw new ProjectConfigurationException('Wrong buildType.', null)
            }
            println "classpathentry kind=\"src\" path=\"src/$buildType/java\""
            node.appendNode("classpathentry kind=\"src\" path=\"src/$buildType/java\"")
        }

        node.appendNode('classpathentry kind="src" path="gen"')

        //node.appendNode('classpathentry kind="src" path=".apt_generated"').appendNode('attributes').appendNode('attribute name="optional" value="true"')
        //node.appendNode('classpathentry', [kind: 'src', path: '.apt_generated']).appendNode('attributes').appendNode('attribute', [name: 'optional', value: 'true'])
    }
}

eclipse.project {

    name = project.projectDir.getName()

    natures 'com.android.ide.eclipse.adt.AndroidNature'

    buildCommand 'com.android.ide.eclipse.adt.ResourceManagerBuilder'
    buildCommand 'com.android.ide.eclipse.adt.PreCompilerBuilder'
    buildCommand 'com.android.ide.eclipse.adt.ApkBuilder'

    linkedResource name: 'AndroidManifest.xml', type: '1', location: new File(project.projectDir, 'src/main/AndroidManifest.xml').getAbsolutePath()
    linkedResource name: 'res', type: '2', location: new File(project.projectDir, 'src/main/res').getAbsolutePath()

    if (new File(project.projectDir, 'src/main/assets').exists()) {
        linkedResource name: 'assets', type: '2', location: new File(project.projectDir, 'src/main/assets').getAbsolutePath()
    }
}

task cleanEclipseExtra << {
    new File(project.projectDir, '.settings').deleteDir()
    new File(project.projectDir, 'bin').deleteDir()
    new File(project.projectDir, 'gen').deleteDir()
    //new File(project.projectDir, '.apt_generated').deleteDir()
    new File(project.projectDir, 'project.properties').delete()
    new File(project.projectDir, '.factorypath').delete()
}

task eclipseExtra << {
    new File(project.projectDir, 'gen').mkdir()
    new File(project.projectDir, 'project.properties').withWriter{ out ->
        out.writeLine('target=' + project.android.compileSdkVersion)
        out.writeLine('android.library=true')
    }

    /*
    File dirDaggerCompiler = new File(project.projectDir.getParentFile().getParentFile().getParentFile().getParentFile(), 'dagger')
    new File(project.projectDir, '.factorypath').withWriter{ out ->
        out.writeLine('<factorypath>')
        out.writeLine('<factorypathentry kind="PLUGIN" id="org.eclipse.jst.ws.annotations.core" enabled="true" runInBatchMode="false"/>')
        out.writeLine('<factorypathentry kind="EXTJAR" id="' + new File(dirDaggerCompiler, 'dagger-1.2.1.jar').getAbsolutePath() + '" enabled="true" runInBatchMode="false"/>')
        out.writeLine('<factorypathentry kind="EXTJAR" id="' + new File(dirDaggerCompiler, 'dagger-compiler-1.2.1.jar').getAbsolutePath() + '" enabled="true" runInBatchMode="false"/>')
        out.writeLine('<factorypathentry kind="EXTJAR" id="' + new File(dirDaggerCompiler, 'javawriter-2.2.1.jar').getAbsolutePath() + '" enabled="true" runInBatchMode="false"/>')
        out.writeLine('<factorypathentry kind="EXTJAR" id="' + new File(dirDaggerCompiler, 'javax.inject-1.jar').getAbsolutePath() + '" enabled="true" runInBatchMode="false"/>')
        out.writeLine('</factorypath>')
    }

    new File(project.projectDir, '.settings/org.eclipse.jdt.core.prefs').append('org.eclipse.jdt.core.compiler.processAnnotations=enabled')
    */
}

project.tasks.cleanEclipse.dependsOn cleanEclipseExtra
project.tasks.eclipseProject.dependsOn eclipseExtra